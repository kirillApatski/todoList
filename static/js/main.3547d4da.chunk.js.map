{"version":3,"sources":["common/api/todolists-api.ts","reportWebVitals.ts","common/utils/handle-server-app-error.ts","common/utils/handle-server-network-error.ts","common/utils/create-app-async-thunk.ts","common/actions/action.clearState.ts","features/auth/auth-reducer.ts","app/app-reducer.ts","features/todolistsList/todolists/todolists-reducer.ts","common/components/AddItemForm/AddItemForm.tsx","common/components/EditableSpan/EditableSpan.tsx","common/hooks/useApp.ts","common/hooks/useActions.ts","features/todolistsList/tasks/tasks-reducer.ts","features/todolistsList/todolists/Todolist/Task/Task.tsx","features/auth/auth.selectors.ts","features/todolistsList/todolists/Todolist/Todolist.tsx","features/todolistsList/todolists/todolists.selectors.ts","features/todolistsList/tasks/tasks.selectors.ts","features/todolistsList/todolistsList.tsx","common/components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","features/auth/Login.tsx","app/app.selectors.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","Result_Code","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","params","delete","id","param","put","todolistId","taskId","arg","model","authAPI","formData","handleServerAppError","data","dispatch","messages","length","appActions","setAppError","error","setAppStatus","status","handleServerNetworkError","e","err","isAxiosError","message","createAppAsyncThunk","createAsyncThunk","withTypes","clearState","createAction","loginTC","thunkAPI","rejectWithValue","response","resultCode","OK","isLoggedIn","logOutTC","_","slice","createSlice","name","initialState","reducers","setIsLoggedIn","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","authActions","actions","authThunk","initializeAppTC","setIsInitializedAC","isInitialized","appReducer","appThunk","fetchTodolistsTC","todolists","removeTodolistTC","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","todo","filter","changeTodolistEntityStatusAC","entityStatus","map","tl","splice","unshift","type","todolistsReducer","todolistActions","todoThunk","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","disable","onDoubleClick","useAppDispatch","useDispatch","useAppSelector","useSelector","useActions","useMemo","bindActionCreators","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","task","updateTaskTC","getState","find","t","console","warn","apiModel","deadline","description","priority","startDate","domainModel","tasksReducer","forEach","todoListId","tasksThunks","Task","className","Completed","Checkbox","checked","New","Delete","selectorIsLoggedIn","auth","Todolist","demo","useEffect","thunk","changeFilterHandler","tasksForTodolist","style","paddingTop","Button","to","ROUTE","LOGIN","selectorTodolists","selectorTasks","TodolistsList","addTodolist","useCallback","Grid","container","padding","spacing","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","onSubmit","DEFAULT","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","selectorStatus","selectorIsInitialized","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","fontSize","NOT_FOUND","top","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3547d4da.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {LoginDataType} from \"features/auth/Login\";\r\nimport {UpdateDomainTaskModelType} from \"features/todolistsList/tasks/tasks-reducer\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': '981588b4-bdf2-44d7-86f8-d7ae7d7f8770'\r\n  }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<TodolistType[]>('todo-lists');\r\n  },\r\n  createTodolist(title: string) {\r\n    return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n  },\r\n  deleteTodolist(params:{id: string}) {\r\n    return instance.delete<ResponseType>(`todo-lists/${params.id}`);\r\n  },\r\n  updateTodolist(param: {id: string, title: string}) {\r\n    return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${param.id}`, {title: param.title});\r\n  },\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n  },\r\n  createTask(arg: AddTaskArgType) {\r\n    return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${arg.todolistId}/tasks`, {title: arg.title});\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n  }\r\n}\r\n\r\nexport const authAPI = {\r\n  login(formData: LoginDataType) {\r\n    return instance.post<LoginDataType, AxiosResponse<ResponseType<{ userId: string }>>>('auth/login', formData)\r\n  },\r\n  me() {\r\n    return instance.get<ResponseType<AutMeResponseType>>('auth/me')\r\n  },\r\n  logOut() {\r\n    return instance.delete<ResponseType>('auth/login')\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport type AutMeResponseType = {\r\n  id: number\r\n  email: string\r\n  login: string\r\n}\r\n\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  fieldsErrors: Array<string>\r\n  data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4\r\n}\r\n\r\nexport enum Result_Code {\r\n  OK = 0,\r\n  ERROR = 1,\r\n  CAPTCHA = 10\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}\r\n\r\nexport type AddTaskArgType = {\r\n  title: string\r\n  todolistId: string\r\n}\r\n\r\nexport type UpdateTaskArgType = {\r\n  taskId: string\r\n  domainModel: UpdateDomainTaskModelType\r\n  todolistId: string\r\n}\r\n\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ResponseType} from \"common/api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {appActions} from \"app/app-reducer\";\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\n  if (data.messages.length) {\n    dispatch(appActions.setAppError({error: data.messages[0]}))\n  } else {\n    dispatch(appActions.setAppError({error: 'Some error occurred'}))\n  }\n  dispatch(appActions.setAppStatus({status: 'failed'}))\n}","import {Dispatch} from \"redux\";\nimport axios, {AxiosError} from \"axios\";\nimport {appActions} from \"app/app-reducer\";\n\nexport const handleServerNetworkError = (e: unknown, dispatch: Dispatch) => {\n  const err = e as Error | AxiosError<{error: string}>\n  if(axios.isAxiosError(err)) {\n    const error = err.message ? err.message : 'Some error occurred'\n    dispatch(appActions.setAppError({error}))\n  } else {\n    dispatch(appActions.setAppError({error: `Native error ${err.message}`}))\n  }\n  dispatch(appActions.setAppStatus({status: 'failed'}))\n}","import {createAsyncThunk} from \"@reduxjs/toolkit\";\nimport {AppDispatch, AppRootStateType} from \"app/store\";\n\n\nexport const createAppAsyncThunk = createAsyncThunk.withTypes<{\n  state: AppRootStateType\n  dispatch: AppDispatch\n  rejectValue: null\n}>()","import {createAction} from \"@reduxjs/toolkit\";\n\nexport const clearState = createAction('common/clearState')","import {\n  appActions,\n} from 'app/app-reducer'\nimport {LoginDataType} from \"./Login\";\nimport {authAPI, Result_Code} from \"common/api/todolists-api\";\nimport {createAppAsyncThunk, handleServerAppError, handleServerNetworkError} from \"common/utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {clearState} from \"common/actions/action.clearState\";\n\nconst initialState = {\n  isLoggedIn: false\n}\n\nconst loginTC = createAppAsyncThunk<{isLoggedIn: boolean}, LoginDataType>(\n  'auth/login',\n  async (param: LoginDataType, thunkAPI) => {\n\n    const {dispatch, rejectWithValue} = thunkAPI\n\n    try {\n      dispatch(appActions.setAppStatus({status: 'loading'}))\n      const response = await authAPI.login(param)\n      if (response.data.resultCode === Result_Code.OK) {\n        dispatch(appActions.setAppStatus({status: 'succeeded'}))\n        return {isLoggedIn: true}\n      } else {\n\n        handleServerAppError(response.data, thunkAPI.dispatch)\n        return rejectWithValue(null)\n      }\n    } catch (error) {\n      handleServerNetworkError(error as { message: string }, dispatch)\n      return rejectWithValue(null)\n    }\n  })\n\nconst logOutTC = createAppAsyncThunk<{isLoggedIn: boolean}>(\n  'auth/logOut',\n  async (_, thunkAPI) => {\n\n    const {dispatch, rejectWithValue} = thunkAPI\n    dispatch(appActions.setAppStatus({status: 'loading'}))\n\n    try {\n      const response = await authAPI.logOut()\n      if (response.data.resultCode === Result_Code.OK) {\n        dispatch(appActions.setAppStatus({status: 'succeeded'}))\n        dispatch(clearState())\n        return {isLoggedIn: false}\n      } else {\n        handleServerAppError(response.data, thunkAPI.dispatch)\n        return {isLoggedIn: true}\n      }\n    } catch (error) {\n      handleServerNetworkError(error as { message: string }, thunkAPI.dispatch)\n      return rejectWithValue(null)\n    }\n  })\n\nconst slice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\n      state.isLoggedIn = action.payload.isLoggedIn\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginTC.fulfilled, (state, action) => {\n      state.isLoggedIn = action.payload.isLoggedIn\n    })\n    builder.addCase(logOutTC.fulfilled, (state, action) => {\n      state.isLoggedIn = action.payload.isLoggedIn\n    })\n  }\n\n})\n\nexport const authReducer = slice.reducer\nexport const authActions = slice.actions\nexport const authThunk = {loginTC, logOutTC}\n\n\n\n\n\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authAPI, Result_Code} from \"common/api/todolists-api\";\r\nimport {authActions} from \"features/auth/auth-reducer\";\r\nimport {createAppAsyncThunk, handleServerNetworkError} from \"common/utils\";\r\n\r\n\r\nexport type AppInitialStateType = typeof initialState\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nconst initialState = {\r\n    isInitialized: false,\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\n\r\nconst initializeAppTC = createAppAsyncThunk(\r\n  'app/initializeAppTC',\r\n  async (_, thunkAPI) => {\r\n\r\n      const {dispatch, rejectWithValue} = thunkAPI\r\n\r\n      try {\r\n\r\n          dispatch(appActions.setAppStatus({status: 'loading'}))\r\n          const response = await authAPI.me()\r\n          dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n\r\n          if(response.data.resultCode === Result_Code.OK) {\r\n\r\n              dispatch(authActions.setIsLoggedIn({isLoggedIn: true}))\r\n              dispatch(appActions.setIsInitializedAC({isInitialized: true}))\r\n              dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n\r\n          } else {\r\n              return rejectWithValue(null)\r\n          }\r\n      } catch (e) {\r\n          handleServerNetworkError(e, dispatch)\r\n          return rejectWithValue(null)\r\n      } finally {\r\n          dispatch(appActions.setIsInitializedAC({isInitialized: true}))\r\n      }\r\n  }\r\n)\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        setAppError(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatus(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const appActions = slice.actions\r\nexport const appThunk = {initializeAppTC}\r\n\r\n\r\n\r\n","import {Result_Code, todolistsAPI, TodolistType} from 'common/api/todolists-api'\r\nimport {RequestStatusType, appActions} from 'app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {clearState} from \"common/actions/action.clearState\";\r\nimport {createAppAsyncThunk, handleServerNetworkError} from \"common/utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst fetchTodolistsTC = createAppAsyncThunk<{todolists: TodolistType[]}>(\r\n  'todo/fetchTodolistsTC',\r\n  async (_, thunkAPI) => {\r\n      const {dispatch, rejectWithValue} = thunkAPI\r\n      try {\r\n          dispatch(appActions.setAppStatus({status: 'loading'}))\r\n          const response = await todolistsAPI.getTodolists()\r\n          dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n          return {todolists: response.data}\r\n      } catch (e) {\r\n          handleServerNetworkError(e, dispatch)\r\n          return rejectWithValue(null)\r\n      }\r\n  }\r\n)\r\n\r\nconst removeTodolistTC = createAppAsyncThunk<{ id: string}, {id: string}>(\r\n  'todo/removeTodolistTC',\r\n  async (param:{id: string}, thunkAPI) => {\r\n      const {dispatch, rejectWithValue} = thunkAPI\r\n      try {\r\n          dispatch(appActions.setAppStatus({status: 'loading'}))\r\n          const response = await todolistsAPI.deleteTodolist(param)\r\n          dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n          if (response.data.resultCode === Result_Code.OK) {\r\n              return { id: param.id }\r\n          } else {\r\n              return rejectWithValue(null)\r\n          }\r\n      } catch (e) {\r\n          handleServerNetworkError(e, dispatch)\r\n          return rejectWithValue(null)\r\n      }\r\n  }\r\n)\r\n\r\nconst addTodolistTC = createAppAsyncThunk<{todolist: TodolistType}, string>(\r\n  'todo/addTodolistTC',\r\n  async (title: string, thunkAPI) => {\r\n      const {dispatch, rejectWithValue} = thunkAPI\r\n      try {\r\n        dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        const response = await todolistsAPI.createTodolist(title)\r\n        dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {todolist: response.data.data.item}\r\n      } catch (e) {\r\n          handleServerNetworkError(e, dispatch)\r\n          return rejectWithValue(null)\r\n      }\r\n  }\r\n)\r\n\r\nconst changeTodolistTitleTC = createAppAsyncThunk<{id: string,title: string}, {id: string,title: string}>(\r\n  'todo/changeTodolistTitleTC',\r\n  async (param: {id: string, title: string}, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n      dispatch(appActions.setAppStatus({status: 'loading'}))\r\n      const response = await todolistsAPI.updateTodolist(param)\r\n      dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n      return {id: param.id,title: param.title}\r\n    } catch (e) {\r\n      handleServerNetworkError(e, dispatch)\r\n      return rejectWithValue(null)\r\n    }\r\n  }\r\n)\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if(index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n      builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n        state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n      })\r\n      builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n        const index = state.findIndex(todo => todo.id === action.payload.id)\r\n        state[index].title = action.payload.title\r\n      })\r\n        builder.addCase(clearState.type, () => {\r\n            return []\r\n        })\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const todolistActions = slice.actions\r\nexport const todoThunk = {fetchTodolistsTC, removeTodolistTC, addTodolistTC, changeTodolistTitleTC}\r\n\r\nexport const {\r\n    changeTodolistFilterAC,\r\n} = slice.actions\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disable?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} disabled={props.disable}/>\r\n        : <span onDoubleClick={activateEditMode} >{props.value}</span>\r\n});\r\n","import {AppDispatch, AppRootStateType} from 'app/store'\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector","import { ActionCreator, ActionCreatorsMapObject, AsyncThunk, bindActionCreators, } from '@reduxjs/toolkit';\nimport { useMemo } from 'react';\nimport {useAppDispatch} from \"common/hooks/useApp\";\n\nexport const useActions = <Actions extends ActionCreatorsMapObject = ActionCreatorsMapObject>\n(actions: Actions): BoundActions<Actions> => {\n  const dispatch = useAppDispatch();\n\n  return useMemo(() => bindActionCreators(actions, dispatch), []);\n};\n\n// Types\ntype BoundActions<Actions extends ActionCreatorsMapObject> = {\n  [key in keyof Actions]: Actions[key] extends AsyncThunk<any, any, any>\n    ? BoundAsyncThunk<Actions[key]>\n    : Actions[key];\n};\n\ntype BoundAsyncThunk<Action extends ActionCreator<any>> = (\n  ...args: Parameters<Action>\n) => ReturnType<ReturnType<Action>>;","import {\r\n   todoThunk,\r\n} from 'features/todolistsList/todolists/todolists-reducer'\r\nimport {\r\n  AddTaskArgType, Result_Code,\r\n  TaskPriorities,\r\n  TaskStatuses,\r\n  TaskType,\r\n  todolistsAPI, UpdateTaskArgType,\r\n  UpdateTaskModelType\r\n} from 'common/api/todolists-api'\r\nimport {appActions} from 'app/app-reducer'\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError,\r\n  createAppAsyncThunk\r\n} from 'common/utils'\r\nimport {createSlice} from \"@reduxjs/toolkit\";\r\nimport {clearState} from \"common/actions/action.clearState\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nconst fetchTasksTC = createAppAsyncThunk<{ tasks: TaskType[], todolistId: string }, string>(\r\n  'tasks/fetchTasksTC',\r\n  async (todolistId: string, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n      dispatch(appActions.setAppStatus({status: 'loading'}))\r\n      const response = await todolistsAPI.getTasks(todolistId)\r\n      const tasks = response.data.items\r\n      dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n      return {tasks, todolistId}\r\n    } catch (error: unknown) {\r\n      handleServerNetworkError(error, dispatch)\r\n      return rejectWithValue(null)\r\n    }\r\n  })\r\n\r\nconst removeTaskTC = createAppAsyncThunk(\r\n  'tasks/removeTaskTC',\r\n  async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n      dispatch(appActions.setAppStatus({status: 'loading'}))\r\n      await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n      dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n      return {taskId: param.taskId, todolistId: param.todolistId}\r\n    } catch (e) {\r\n      handleServerNetworkError(e, dispatch)\r\n      return rejectWithValue(null)\r\n    }\r\n  })\r\n\r\nconst addTaskTC = createAppAsyncThunk<{ task: TaskType }, AddTaskArgType>(\r\n  'tasks/addTaskTC',\r\n  async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    try {\r\n      dispatch(appActions.setAppStatus({status: 'loading'}))\r\n      const response = await todolistsAPI.createTask(arg)\r\n      if (response.data.resultCode === Result_Code.OK) {\r\n        const task = response.data.data.item\r\n        dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {task}\r\n      } else {\r\n        handleServerAppError(response.data, dispatch);\r\n        return rejectWithValue(null)\r\n      }\r\n    } catch (error: any) {\r\n      handleServerNetworkError(error, dispatch)\r\n      return rejectWithValue(null)\r\n    }\r\n  }\r\n)\r\n\r\nconst updateTaskTC = createAppAsyncThunk<UpdateTaskArgType, UpdateTaskArgType>('tasks/updateTaskTC',\r\n  async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue, getState} = thunkAPI\r\n    try {\r\n      dispatch(appActions.setAppStatus({status: 'loading'}))\r\n      const state = getState()\r\n      const task = state.tasks[arg.todolistId].find(t => t.id === arg.taskId)\r\n      if (!task) {\r\n        console.warn('task not found in the state')\r\n        return rejectWithValue(null)\r\n      }\r\n      const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...arg.domainModel\r\n      }\r\n      const response = await todolistsAPI.updateTask(arg.todolistId, arg.taskId, apiModel)\r\n      if (response.data.resultCode === Result_Code.OK) {\r\n        dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return arg\r\n      } else {\r\n        handleServerAppError(response.data, dispatch);\r\n        return rejectWithValue(null)\r\n      }\r\n    } catch (e) {\r\n      handleServerNetworkError(e, dispatch);\r\n      return rejectWithValue(null)\r\n    }\r\n  }\r\n)\r\n\r\n\r\nconst slice = createSlice({\r\n  name: 'tasks',\r\n  initialState: initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(todoThunk.addTodolistTC.fulfilled, (state, action) => {\r\n      state[action.payload.todolist.id] = []\r\n    })\r\n    builder.addCase(todoThunk.removeTodolistTC.fulfilled, (state, action) => {\r\n      delete state[action.payload.id]\r\n    })\r\n    builder.addCase(todoThunk.fetchTodolistsTC.fulfilled, (state, action) => {\r\n      action.payload.todolists.forEach((tl) => state[tl.id] = [])\r\n    })\r\n    builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n      state[action.payload.todolistId] = action.payload.tasks\r\n    })\r\n    builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n      const tasks = state[action.payload.todolistId];\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n      if (index > -1) {\r\n        tasks.splice(index, 1)\r\n      }\r\n    })\r\n    builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n      state[action.payload.task.todoListId].unshift(action.payload.task)\r\n    })\r\n    builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n      const tasks = state[action.payload.todolistId]\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n\r\n      tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n    })\r\n    builder.addCase(clearState.type, () => {\r\n      return {}\r\n    })\r\n  }\r\n})\r\nexport const tasksReducer = slice.reducer\r\nexport const tasksThunks = {fetchTasksTC, removeTaskTC, updateTaskTC, addTaskTC}\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react'\r\nimport {EditableSpan} from 'common/components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from 'common/api/todolists-api'\r\nimport {useActions} from \"common/hooks/useActions\";\r\nimport {tasksThunks} from \"features/todolistsList/tasks/tasks-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    disable: boolean\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {removeTaskTC, updateTaskTC} = useActions(tasksThunks)\r\n\r\n    const removeTaskHandler = () => {\r\n        removeTaskTC({taskId: props.task.id, todolistId: props.todolistId})\r\n    }\r\n\r\n    const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const status = props.task.status === TaskStatuses.Completed ? TaskStatuses.New : TaskStatuses.Completed\r\n        updateTaskTC({ taskId: props.task.id, domainModel: {status}, todolistId: props.todolistId})\r\n    }\r\n\r\n    const onTitleChangeHandler = ( title: string) => {\r\n        updateTaskTC({ taskId: props.task.id, domainModel: {title}, todolistId: props.todolistId})\r\n    }\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={changeStatusHandler}\r\n            disabled={props.disable}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} disable={props.disable}/>\r\n        <IconButton onClick={removeTaskHandler} disabled={props.disable}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {AppRootStateType} from \"app/store\";\n\nexport const selectorIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn","import React, { useEffect } from 'react'\r\nimport { AddItemForm } from 'common/components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from 'common/components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from 'features/todolistsList/todolists/Todolist/Task/Task'\r\nimport { TaskStatuses, TaskType } from 'common/api/todolists-api'\r\nimport {\r\n    FilterValuesType,\r\n    todolistActions,\r\n    TodolistDomainType,\r\n    todoThunk\r\n} from 'features/todolistsList/todolists/todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport { tasksThunks } from 'features/todolistsList/tasks/tasks-reducer'\r\n\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTE} from \"app/App\";\r\nimport {selectorIsLoggedIn} from \"features/auth/auth.selectors\";\r\nimport {useAppSelector} from \"common/hooks/useApp\";\r\nimport {useActions} from \"common/hooks/useActions\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n    entityStatus: string\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const isLoggedIn = useAppSelector(selectorIsLoggedIn)\r\n\r\n    const {removeTodolistTC, changeTodolistTitleTC} = useActions(todoThunk)\r\n    const {addTaskTC} = useActions(tasksThunks)\r\n    const {changeTodolistFilterAC} = useActions(todolistActions)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = tasksThunks.fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = (title: string) => {\r\n        addTaskTC({title, todolistId: props.todolist.id})\r\n    }\r\n\r\n    const removeTodolist =  () => {\r\n        removeTodolistTC({id: props.todolist.id})\r\n    }\r\n\r\n    const changeTodolistTitle = (title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id , title})\r\n    }\r\n\r\n    const changeFilterHandler = (value: FilterValuesType) => {\r\n        changeTodolistFilterAC({id: props.todolist.id, filter: value})\r\n    }\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if(!isLoggedIn){\r\n        return <Navigate to={ROUTE.LOGIN}/>\r\n    }\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                disable={props.todolist.entityStatus === 'loading'}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => changeFilterHandler('all')}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={() => changeFilterHandler('active')}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => changeFilterHandler('completed')}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {AppRootStateType} from \"app/store\";\n\nexport const selectorTodolists = (state: AppRootStateType) => state.todolists","import {AppRootStateType} from \"app/store\";\n\nexport const selectorTasks = (state: AppRootStateType) => state.tasks","import React, { useCallback, useEffect } from 'react'\r\nimport {\r\n    todoThunk\r\n} from 'features/todolistsList/todolists/todolists-reducer'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from 'common/components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './todolists/Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTE} from \"app/App\";\r\nimport {selectorIsLoggedIn} from \"features/auth/auth.selectors\";\r\nimport {selectorTodolists} from \"features/todolistsList/todolists/todolists.selectors\";\r\nimport {selectorTasks} from \"features/todolistsList/tasks/tasks.selectors\";\r\nimport {useActions} from \"common/hooks/useActions\";\r\nimport {useAppDispatch, useAppSelector} from \"common/hooks/useApp\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const dispatch = useAppDispatch()\r\n    const todolists = useAppSelector(selectorTodolists)\r\n    const tasks = useAppSelector(selectorTasks)\r\n    const isLoggedIn = useAppSelector(selectorIsLoggedIn)\r\n    const {addTodolistTC, fetchTodolistsTC} = useActions(todoThunk)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodolistsTC()\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        addTodolistTC(title)\r\n    }, [dispatch])\r\n\r\n\r\n    if(!isLoggedIn){\r\n        return <Navigate to={ROUTE.LOGIN}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                entityStatus={tl.entityStatus}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from 'app/store';\r\nimport { appActions } from 'app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(appActions.setAppError({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClick={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {FC, useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from 'features/todolistsList/todolistsList'\r\nimport {useDispatch} from 'react-redux'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from 'common/components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"features/auth/Login\";\r\nimport {Routes, Route, Navigate} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {selectorIsInitialized, selectorStatus} from \"app/app.selectors\";\r\nimport {selectorIsLoggedIn} from \"features/auth/auth.selectors\";\r\nimport {appThunk} from \"app/app-reducer\";\r\nimport {authThunk} from \"features/auth/auth-reducer\";\r\nimport {useAppSelector} from \"common/hooks/useApp\";\r\nimport {useActions} from \"common/hooks/useActions\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport enum ROUTE {\r\n    DEFAULT = '/',\r\n    LOGIN = '/login',\r\n    NOT_FOUND = '/404'\r\n}\r\n\r\nexport const App: FC<PropsType> = ({demo = false}) => {\r\n    const dispatch = useDispatch()\r\n    const status = useAppSelector(selectorStatus)\r\n    const isInitialized = useAppSelector(selectorIsInitialized)\r\n    const isLoggedIn = useAppSelector(selectorIsLoggedIn)\r\n    const {initializeAppTC} = useActions(appThunk)\r\n    const {logOutTC} = useActions(authThunk)\r\n\r\n    const logOut = () => {\r\n        logOutTC()\r\n    }\r\n\r\n    useEffect(() => {\r\n        initializeAppTC()\r\n    }, [dispatch])\r\n\r\n    if(!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    { isLoggedIn && <Button color=\"inherit\" onClick={logOut}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={ROUTE.DEFAULT} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={ROUTE.LOGIN} element={<Login/>}/>\r\n                    <Route path='/404' element={<h1 style={{color: 'red', textAlign: 'center', fontSize: '100px'}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to={ROUTE.NOT_FOUND}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useSelector} from \"react-redux\";\nimport {Navigate} from \"react-router-dom\";\nimport {ROUTE} from \"app/App\";\nimport {selectorIsLoggedIn} from \"features/auth/auth.selectors\";\nimport {authThunk} from \"features/auth/auth-reducer\";\nimport {useActions} from \"common/hooks/useActions\";\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n}\n\nexport type LoginDataType = {\n    email: string,\n    password: string,\n    rememberMe?: false\n    captcha?: string\n}\n\nexport const Login = () => {\n\n    const isLoggedIn = useSelector(selectorIsLoggedIn)\n    const {loginTC} = useActions(authThunk)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n            captcha: ''\n        },\n        validate: (values: LoginDataType) => {\n            const errors: FormikErrorType = {}\n            if (!values.email) {\n                errors.email = 'Required'\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address'\n            }\n            if (!values.password) {\n                errors.password = 'Required'\n            } else if (values.password.length < 8) {\n                errors.password = 'Invalid length password'\n            }\n            return errors\n        },\n        onSubmit: (values: LoginDataType) => {\n            loginTC(values)\n        },\n    });\n\n    if(isLoggedIn) {\n        return <Navigate to={ROUTE.DEFAULT}/>\n    }\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email &&\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password &&\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox/>}\n                            {...formik.getFieldProps('rememberMe')}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}","import {AppRootStateType} from \"app/store\";\n\nexport const selectorStatus = (state: AppRootStateType) => state.app.status\nexport const selectorIsInitialized = (state: AppRootStateType) => state.app.isInitialized","import { tasksReducer } from 'features/todolistsList/tasks/tasks-reducer';\r\nimport { todolistsReducer } from 'features/todolistsList/todolists/todolists-reducer';\r\nimport {AnyAction, combineReducers} from 'redux'\r\nimport thunkMiddleware, {ThunkDispatch} from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"features/auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppDispatch = ThunkDispatch<AppRootStateType, unknown, AnyAction>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from 'app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}