{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","Result_Code","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","formData","slice","createSlice","name","initialState","isInitialized","status","error","reducers","setAppErrorAC","state","action","payload","setAppStatusAC","setIsInitializedAC","appReducer","reducer","actions","removeTodolistAC","filter","todo","index","findIndex","tl","splice","addTodolistAC","push","todolist","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","removeTaskAC","tasks","t","addTaskAC","task","todoListId","unshift","updateTaskAC","setTasksAC","extraReducers","type","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","disable","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","isLoggedIn","useSelector","auth","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","to","ROUTE","LOGIN","TodolistsList","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","setIsLoggedInAC","authReducer","Login","formik","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","onSubmit","alert","JSON","stringify","response","OK","resetForm","DEFAULT","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","fontSize","NOT_FOUND","top","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c582e9f8.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\nimport {LoginDataType} from \"../features/Login/Login\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '981588b4-bdf2-44d7-86f8-d7ae7d7f8770'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(formData: LoginDataType) {\r\n        return instance.post<LoginDataType, AxiosResponse<ResponseType<{userId: string}>>>('auth/login', formData)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AutMeResponseType>>('auth/me')\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n// types\r\n\r\nexport type AutMeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum Result_Code {\r\n    OK = 0,\r\n    ERROR = 1,\r\n    CAPTCHA = 10\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isInitialized: false,\r\n    status: 'idle',\r\n    error: null\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC, setIsInitializedAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            state.filter(todo => todo.id !== action.payload.id)\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if(index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.push({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(todo => todo.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    setTodolistsAC,\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistEntityStatusAC\r\n} = slice.actions\r\n\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(() => {\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then(() => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then(() => {\r\n                dispatch(changeTodolistTitleAC({id: id,title: title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {\r\n    addTodolistAC,\r\n    removeTodolistAC,\r\n    setTodolistsAC,\r\n\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { setAppStatusAC } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{taskId: string, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if(index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{task: TaskType}>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todolistId: string}>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n\r\n            tasks[index] = {...tasks[index], ...action.payload.model}\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        }\r\n    },\r\n    extraReducers: {\r\n\r\n        [addTodolistAC.type]: (state, action: PayloadAction<{todolist: TodolistType}>) => {\r\n            state[action.payload.todolist.id] = []\r\n        },\r\n        [removeTodolistAC.type]: (state, action: PayloadAction<{ id: string }>) => {\r\n            delete state[action.payload.id]\r\n        },\r\n        [setTodolistsAC.type]: (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {\r\n            action.payload.todolists.forEach((tl) => state[tl.id] = [])\r\n        }\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\nexport const {setTasksAC, updateTaskAC, addTaskAC, removeTaskAC} = slice.actions\r\n\r\n\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks: tasks, todolistId: todolistId}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => {\r\n            const action = removeTaskAC({taskId: taskId,todolistId: todolistId})\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task: task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n\r\n            return\r\n\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId: taskId,model: domainModel,todolistId: todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disable?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} disabled={props.disable}/>\r\n        : <span onDoubleClick={activateEditMode} >{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    disable: boolean\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.disable}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} disable={props.disable}/>\r\n        <IconButton onClick={onClickHandler} disabled={props.disable}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTE} from \"../../../app/App\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n    entityStatus: string\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const isLoggedIn = useSelector<AppRootStateType>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if(!isLoggedIn){\r\n        return <Navigate to={ROUTE.LOGIN}/>\r\n    }\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                disable={props.todolist.entityStatus === 'loading'}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {ROUTE} from \"../../app/App\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id:todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if(!isLoggedIn){\r\n        return <Navigate to={ROUTE.LOGIN}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                entityStatus={tl.entityStatus}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClick={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {FC, useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Routes, Route, Navigate} from \"react-router-dom\";\r\nimport {initializeAppTC, logOutTC} from \"../features/Login/auth-reducer\";\r\nimport {CircularProgress} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport enum ROUTE {\r\n    DEFAULT = '/',\r\n    LOGIN = '/login',\r\n    NOT_FOUND = '/404'\r\n}\r\n\r\nexport const App: FC<PropsType> = ({demo = false}) => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const logOut = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if(!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    { isLoggedIn && <Button color=\"inherit\" onClick={logOut}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={ROUTE.DEFAULT} element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path={ROUTE.LOGIN} element={<Login/>}/>\r\n                    <Route path='/404' element={<h1 style={{color: 'red', textAlign: 'center', fontSize: '100px'}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to={ROUTE.NOT_FOUND}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { Dispatch } from 'redux'\nimport {\n    setAppStatusAC,\n    setIsInitializedAC,\n} from '../../app/app-reducer'\nimport {LoginDataType} from \"./Login\";\nimport {authAPI, Result_Code} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nconst slice = createSlice({\n    name: 'auth',\n    initialState: initialState,\n    reducers: {\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\n            state.isLoggedIn = action.payload.value\n        }\n    }\n\n})\n\nexport const authReducer = slice.reducer\nexport const {setIsLoggedInAC} = slice.actions\n\n\nexport const loginTC = (data: LoginDataType) => async (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    try {\n        const response = await authAPI.login(data)\n        if(response.data.resultCode === Result_Code.OK) {\n            dispatch(setIsLoggedInAC({value: true}))\n        } else {\n            handleServerAppError(response.data, dispatch)\n        }\n    } catch (error) {\n        handleServerNetworkError(error as {message: string}, dispatch)\n    }\n    dispatch(setAppStatusAC({ status:'succeeded'}))\n\n}\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status:'loading'}))\n    try {\n        const response = await authAPI.me()\n        if(response.data.resultCode === Result_Code.OK) {\n            dispatch(setIsLoggedInAC({value: true}))\n            dispatch(setIsInitializedAC({isInitialized: true}))\n            dispatch(setAppStatusAC({status:'succeeded'}))\n\n        } else {\n            handleServerAppError(response.data, dispatch)\n        }\n    } catch (error) {\n        handleServerNetworkError(error as {message: string}, dispatch)\n    } finally {\n        dispatch(setIsInitializedAC({isInitialized: true}))\n    }\n\n    dispatch(setAppStatusAC({status:'succeeded'}))\n\n}\n\nexport const logOutTC = () => async (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status:'loading'}))\n    try {\n        const response = await authAPI.logOut()\n        if(response.data.resultCode === Result_Code.OK) {\n            dispatch(setIsLoggedInAC({value: false}))\n            dispatch(setAppStatusAC({status:'succeeded'}))\n        } else {\n            handleServerAppError(response.data, dispatch)\n        }\n    } catch (error) {\n        handleServerNetworkError(error as {message: string}, dispatch)\n    }\n    dispatch(setAppStatusAC({status:'succeeded'}))\n}\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./auth-reducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Navigate} from \"react-router-dom\";\nimport {ROUTE} from \"../../app/App\";\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n}\n\nexport type LoginDataType = {\n    email: string,\n    password: string,\n    rememberMe?: false\n    captcha?: string\n}\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n            captcha: ''\n        },\n        validate: (values: LoginDataType) => {\n            const errors: FormikErrorType = {}\n            if (!values.email) {\n                errors.email = 'Required'\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address'\n            }\n            if (!values.password) {\n                errors.password = 'Required'\n            } else if (values.password.length < 8) {\n                errors.password = 'Invalid length password'\n            }\n            return errors\n        },\n        onSubmit: (values: LoginDataType) => {\n            alert(JSON.stringify(values, null, 2));\n            dispatch(loginTC(values))\n            formik.resetForm()\n        },\n    });\n\n    if(isLoggedIn) {\n        return <Navigate to={ROUTE.DEFAULT}/>\n    }\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email &&\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password &&\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox/>}\n                            {...formik.getFieldProps('rememberMe')}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { combineReducers } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}